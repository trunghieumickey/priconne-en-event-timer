{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","dropEventData","setDropEventDataData","eventData","setEventData","displayFormat","dataFormat","timer","setTimer","useEffect","fetch","then","r","json","setInterval","className","style","height","width","rows","forEach","event","i","startDate","moment","utc","start_time","endDate","end_time","totalSecondsLeft","duration","diff","asSeconds","secondsLeft","Math","floor","minsLeft","hoursLeft","daysLeft","push","id","event_name","starts_in","start_date","local","format","end_date","columns","field","headerName","flex","renderDropEvents","title","renderEvents","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13e23905.chunk.js","sourcesContent":["import moment from 'moment';\nimport React, { useState, useEffect } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport './App.css';\n\nfunction App() {\n  const [dropEventData, setDropEventDataData] = useState([]);\n  const [eventData, setEventData] = useState([]);\n  const displayFormat = 'YYYY MMM DD hh:mm:ss a';\n  const dataFormat = 'YYYY/MM/DD hh:mm:ss';\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    fetch('data/data_1.json')\n      .then((r) => r.json())\n      .then((json) => setDropEventDataData(json));\n\n\n    fetch('data/data_2.json')\n      .then((r) => r.json())\n      .then((json) => setEventData(json));\n\n    setInterval(() => {\n      setTimer(1);\n    }, 1000);\n\n  }, []);\n\n  useEffect(() => {\n    setTimer(0);\n  }, [timer]);\n\n  const renderDropEvents = () => {\n    const columns = [\n      { field: 'event_name', headerName: '2x Event', flex: 1 },\n      { field: 'starts_in', headerName: 'Starts in', width: 300 },\n      { field: 'start_date', headerName: 'Start Date', flex: 1 },\n      { field: 'end_date', headerName: 'End Date', flex: 1 },\n    ];\n\n    const rows = [];\n\n    dropEventData.forEach((event, i) => {\n      const startDate = moment.utc(event.start_time, dataFormat)\n      const endDate = moment.utc(event.end_time, dataFormat)\n      const totalSecondsLeft = moment.duration(startDate.diff(moment())).asSeconds();\n      const secondsLeft = Math.floor(totalSecondsLeft) % 60;\n      const minsLeft = Math.floor(totalSecondsLeft / 60 % 60);\n      const hoursLeft = Math.floor(totalSecondsLeft / 60 / 60 % 24);\n      const daysLeft = Math.floor(totalSecondsLeft / 60 / 60 / 24);\n\n      if (endDate.diff(moment()) > 0) {\n        rows.push({\n          id: i + 1,\n          event_name: event.event_name,\n          starts_in: (totalSecondsLeft <= 0) ? 'In progress' : `${daysLeft} days ${hoursLeft} hours ${minsLeft} min ${secondsLeft} secs`,\n          start_date: startDate.local().format(displayFormat),\n          end_date: endDate.local().format(displayFormat),\n        });\n      }\n    });\n\n    return <div style={{ height: '50%', width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n\n  }\n\n  const renderEvents = () => {\n    const columns = [\n      { field: 'event_name', headerName: 'Event', flex: 1 },\n      { field: 'starts_in', headerName: 'Starts in', width: 300 },\n      { field: 'start_date', headerName: 'Start Date', flex: 1 },\n      { field: 'end_date', headerName: 'End Date', flex: 1 },\n    ];\n\n    const rows = [];\n\n    eventData.forEach((event, i) => {\n      const startDate = moment.utc(event.start_time, dataFormat)\n      const endDate = moment.utc(event.end_time, dataFormat)\n      const totalSecondsLeft = moment.duration(startDate.diff(moment())).asSeconds();\n      const secondsLeft = Math.floor(totalSecondsLeft) % 60;\n      const minsLeft = Math.floor(totalSecondsLeft / 60 % 60);\n      const hoursLeft = Math.floor(totalSecondsLeft / 60 / 60 % 24);\n      const daysLeft = Math.floor(totalSecondsLeft / 60 / 60 / 24);\n      if (endDate.diff(moment()) > 0) {\n        rows.push({\n          id: i + 1,\n          event_name: event.title,\n          starts_in: (totalSecondsLeft <= 0) ? 'In progress' : `${daysLeft} days ${hoursLeft} hours ${minsLeft} min ${secondsLeft} secs`,\n          start_date: startDate.local().format(displayFormat),\n          end_date: endDate.local().format(displayFormat),\n        });\n      }\n    });\n\n    return <div style={{ height: '50%', width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  }\n\n  return (\n    <div className=\"App\" style={{ height: '100vh', width: '100%' }}>\n      {renderDropEvents()}\n      {renderEvents()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}