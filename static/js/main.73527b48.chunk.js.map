{"version":3,"sources":["card/CountdownCard.js","App.js","reportWebVitals.js","index.js"],"names":["CountdownCard","event","displayFormat","dataFormat","startDate","moment","utc","start_time","endDate","end_time","totalSecondsLeft","duration","diff","asSeconds","secondsLeft","Math","floor","minsLeft","hoursLeft","daysLeft","totalSecondsToEnd","secondsToEnd","minsToEnd","hoursToEnd","daysToEnd","inProgress","padZero","number","padStart","showEnd","className","alt","icon_src","src","event_name","local","format","App","useState","eventData","setEventData","timer","setTimer","useEffect","fetch","then","r","json","setInterval","map","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAiDeA,EA9CO,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACfC,EAAgB,yBAChBC,EAAa,sBAEbC,EAAYC,IAAOC,IAAIL,EAAMM,WAAYJ,GACzCK,EAAUH,IAAOC,IAAIL,EAAMQ,SAAUN,GACrCO,EAAmBL,IAAOM,SAASP,EAAUQ,KAAKP,QAAWQ,YAC7DC,EAAcC,KAAKC,MAAMN,GAAoB,GAC7CO,EAAWF,KAAKC,MAAMN,EAAmB,GAAK,IAC9CQ,EAAYH,KAAKC,MAAMN,EAAmB,GAAK,GAAK,IACpDS,EAAWJ,KAAKC,MAAMN,EAAmB,GAAK,GAAK,IAEnDU,EAAoBf,IAAOM,SAASH,EAAQI,KAAKP,QAAWQ,YAC5DQ,EAAeN,KAAKC,MAAMI,GAAqB,GAC/CE,EAAYP,KAAKC,MAAMI,EAAoB,GAAK,IAChDG,EAAaR,KAAKC,MAAMI,EAAoB,GAAK,GAAK,IACtDI,EAAYT,KAAKC,MAAMI,EAAoB,GAAK,GAAK,IAErDK,EAAaf,GAAoB,EACjCgB,EAAU,SAACC,GAAD,MAAY,UAAGA,GAASC,SAAS,EAAG,MAC9CC,IAAY5B,EAAMM,aAAeN,EAAMQ,UAE7C,OACI,sBAAKqB,UAAS,yBAAqBL,EAAc,SAAW,IAA5D,UACI,qBAAKK,UAAU,OAAf,SACI,qBAAKC,IAAK9B,EAAM+B,SAAUC,IAAG,gBAAWhC,EAAM+B,SAAjB,YAEjC,sBAAKF,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SAAwB7B,EAAMiC,aAC9B,sBAAKJ,UAAU,YAAf,UACML,EACE,qBAAKK,UAAU,WAAf,6BAEA,eAAC,WAAD,WAAU,qBAAKA,UAAU,WAAf,uBAAyC,wCAASX,EAAT,iBAA0BO,EAAQR,GAAlC,YAAgDQ,EAAQT,GAAxD,YAAqES,EAAQZ,SAEnIe,GAAW,eAAC,WAAD,WAAU,qBAAKC,UAAU,WAAf,qBAAuC,wCAASN,EAAT,iBAA2BE,EAAQH,GAAnC,YAAkDG,EAAQJ,GAA1D,YAAwEI,EAAQL,YAEjJ,sBAAKS,UAAU,OAAf,UACI,+CAAmB1B,EAAU+B,QAAQC,OAAOlC,MAC3C2B,GAAW,6CAAiBrB,EAAQ2B,QAAQC,OAAOlC,gB,MCDzDmC,MAnCf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAGaF,mBAAS,GAHtB,mBAGNG,EAHM,KAGCC,EAHD,KAqBb,OAhBAC,qBAAU,WACRC,MAAM,kBACHC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACE,GAAD,OAAUP,EAAaO,MAE/BC,aAAY,WACVN,EAAS,KACR,OAEF,IAEHC,qBAAU,WACRD,EAAS,KACR,CAACD,IAIF,qBAAKX,UAAU,MAAf,SACE,qBAAKA,UAAU,iBAAf,SAEIS,EAAUU,KAAI,SAAChD,EAAOiD,GAEpB,OADgB7C,IAAOC,IAAIL,EAAMQ,SAxBxB,uBAyBOG,KAAKP,OAAY,EAAK,cAAC,EAAD,CAAeJ,MAAOA,IAAY,aCrBrEkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.73527b48.chunk.js","sourcesContent":["import moment from 'moment';\r\nimport { Fragment } from 'react';\r\n\r\nconst CountdownCard = ({ event }) => {\r\n    const displayFormat = 'YYYY MMM DD hh:mm:ss a';\r\n    const dataFormat = 'YYYY/MM/DD hh:mm:ss';\r\n\r\n    const startDate = moment.utc(event.start_time, dataFormat)\r\n    const endDate = moment.utc(event.end_time, dataFormat)\r\n    const totalSecondsLeft = moment.duration(startDate.diff(moment())).asSeconds();\r\n    const secondsLeft = Math.floor(totalSecondsLeft) % 60;\r\n    const minsLeft = Math.floor(totalSecondsLeft / 60 % 60);\r\n    const hoursLeft = Math.floor(totalSecondsLeft / 60 / 60 % 24);\r\n    const daysLeft = Math.floor(totalSecondsLeft / 60 / 60 / 24);\r\n\r\n    const totalSecondsToEnd = moment.duration(endDate.diff(moment())).asSeconds();\r\n    const secondsToEnd = Math.floor(totalSecondsToEnd) % 60;\r\n    const minsToEnd = Math.floor(totalSecondsToEnd / 60 % 60);\r\n    const hoursToEnd = Math.floor(totalSecondsToEnd / 60 / 60 % 24);\r\n    const daysToEnd = Math.floor(totalSecondsToEnd / 60 / 60 / 24);\r\n\r\n    const inProgress = totalSecondsLeft <= 0;\r\n    const padZero = (number) => `${number}`.padStart(2, '0');\r\n    const showEnd = !(event.start_time === event.end_time);\r\n\r\n    return (\r\n        <div className={`countdown-card ${(inProgress) ? 'active' : ''}`}>\r\n            <div className='icon'>\r\n                <img alt={event.icon_src} src={`icons/${event.icon_src}.png`} />\r\n            </div>\r\n            <div className='info'>\r\n                <div className='title'>{event.event_name}</div>\r\n                <div className='countdown'>\r\n                    {(inProgress) ?\r\n                        <div className='subtitle'>--In progress--</div>\r\n                        :\r\n                        <Fragment><div className='subtitle'>Starts in</div><div>{`${daysLeft} days ${padZero(hoursLeft)}:${padZero(minsLeft)}:${padZero(secondsLeft)}`}</div></Fragment>\r\n                    }\r\n                    {showEnd && <Fragment><div className='subtitle'>Ends in</div><div>{`${daysToEnd} days ${padZero(hoursToEnd)}:${padZero(minsToEnd)}:${padZero(secondsToEnd)}`}</div></Fragment>}\r\n                </div>\r\n                <div className='date'>\r\n                    <div >Start Date: {startDate.local().format(displayFormat)}</div>\r\n                    {showEnd && <div >End Date: {endDate.local().format(displayFormat)}</div>}\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CountdownCard;","import moment from 'moment';\r\nimport React, { useState, useEffect } from 'react';\r\nimport CountdownCard from './card/CountdownCard';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [eventData, setEventData] = useState([]);\r\n  const dataFormat = 'YYYY/MM/DD hh:mm:ss';\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetch('data/data.json')\r\n      .then((r) => r.json())\r\n      .then((json) => setEventData(json));\r\n\r\n    setInterval(() => {\r\n      setTimer(1);\r\n    }, 1000);\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimer(0);\r\n  }, [timer]);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='card-container'>\r\n        {\r\n          eventData.map((event, i) => {\r\n            const endDate = moment.utc(event.end_time, dataFormat)\r\n            return (endDate.diff(moment()) > 0) ? <CountdownCard event={event} /> : null;\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}